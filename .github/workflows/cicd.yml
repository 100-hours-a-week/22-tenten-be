name: Backend - CI/CD (prod)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '**/README*'

jobs:
  ci:
    name: CI (Build)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build Spring Project
        run: ./gradlew build -x test

  cd:
    name: CD (Push Image & Deploy to EC2)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - uses: actions/checkout@v3

      # AWS CLI & Í∂åÌïú ÏÑ∏ÌåÖ
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2   # Î¶¨Ï†Ñ ÎßûÍ≤å ÏàòÏ†ï

      # ECR Î°úÍ∑∏Ïù∏
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker build & push
      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kakaobase-backend
          IMAGE_TAG: prod
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # EC2 Î∞∞Ìè¨ (SSH)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            docker pull ${{ steps.login-ecr.outputs.registry }}/kakaobase-backend:prod

            docker stop backend || true
            docker rm backend || true

            # ÌôòÍ≤Ω Î≥ÄÏàòÎäî SSM Parameter StoreÏóêÏÑú Ï£ºÏûÖ
            export AI_SERVER_URL=$(aws ssm get-parameter --name "/kakaobase/prod/AI_SERVER_URL" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)
            export AWS_ACCESS_KEY=$(aws ssm get-parameter --name "/kakaobase/prod/AWS_ACCESS_KEY" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)
            export AWS_SECRET_KEY=$(aws ssm get-parameter --name "/kakaobase/prod/AWS_SECRET_KEY" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)
            export AWS_REGION=$(aws ssm get-parameter --name "/kakaobase/prod/AWS_REGION" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)
            export BUCKET_NAME=$(aws ssm get-parameter --name "/kakaobase/prod/BUCKET_NAME" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)
            export COOKIE_DOMAIN=$(aws ssm get-parameter --name "/kakaobase/prod/COOKIE_DOMAIN" --with-decryption --query "Parameter.Value" --output text --region ap-northeast-2)

            docker run -d --name backend \
              -p 8080:8080 \
              -e AI_SERVER_URL=$AI_SERVER_URL \
              -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY \
              -e AWS_SECRET_KEY=$AWS_SECRET_KEY \
              -e AWS_REGION=$AWS_REGION \
              -e BUCKET_NAME=$BUCKET_NAME \
              -e COOKIE_DOMAIN=$COOKIE_DOMAIN \
              ${{ steps.login-ecr.outputs.registry }}/kakaobase-backend:prod
  

  notify:
    name: Discord Notification
    if: always()
    needs: [ci, cd]
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        run: |
          CI_RESULT="${{ needs.ci.result || 'skipped' }}"
          CD_RESULT="${{ needs.cd.result || 'skipped' }}"
          
          COLOR="8359053"
          STATUS="‚ö™ CI/CD Ïã§ÌñâÎê®"
          
          if [ "$CI_RESULT" = "success" ]; then
            STATUS="‚úÖ CI ÏÑ±Í≥µ"
            COLOR="5763719"
          elif [ "$CI_RESULT" = "failure" ]; then
            STATUS="‚ùå CI Ïã§Ìå®"
            COLOR="15158332"
          fi
          
          if [ "$CD_RESULT" = "success" ]; then
            STATUS="‚úÖ CD ÏÑ±Í≥µ (EC2 Î∞∞Ìè¨ ÏôÑÎ£å)"
            COLOR="3066993"
          elif [ "$CD_RESULT" = "failure" ]; then
            STATUS="‚ùå CD Ïã§Ìå® (EC2 Î∞∞Ìè¨ Ïò§Î•ò)"
            COLOR="15158332"
          fi
          
          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üîî GitHub Actions Í≤∞Í≥º: ${{ github.workflow }}\",
                \"description\": \"$STATUS\nÎ∏åÎûúÏπò: \`${{ github.ref_name }}\`\nÏª§Î∞ã: \`${{ github.actor }}\`\n[üëâ Ïã§Ìñâ Î°úÍ∑∏ Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                \"color\": $COLOR
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
